name: Run accessibility tests on JupyterLab

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # calling from another workflow - for example from a workflow in the JLab repo
  workflow_call:
    inputs:
      repository:
        description: The JupyterLab repository or fork with owner, for example jupyterlab/jupyterlab.
        type: string
        required: true
        default: "jupyterlab/jupyterlab"
      ref:
        description: The Jupyterlab repository's branch, tag, or SHA to checkout.
        type: string
        required: true
        default: "master"
      test_project:
        description: |
          Leave blank to run the full test suite, or enter a Playwright project
          name (such as "regression") to run a part of the test suite.
        type: string
        required: false
      lumino_ref:
        description: |
          Lumino's ref (branch, tag or SHA) to checkout,
          only to be used if you want to test Lumino changes against a JupyterLab build.
        type: string
        required: false
        default: ""

  # enable manual runs for the workflow
  workflow_dispatch:
    inputs:
      repository:
        description: The JupyterLab repository or fork with owner, for example jupyterlab/jupyterlab.
        required: false
        default: "jupyterlab/jupyterlab"
      ref:
        description: The branch, tag, or SHA to checkout.
        required: false
        default: "master"
      test_project:
        description: |
          Leave blank to run the full test suite, or enter a Playwright project
          name (such as "regression") to run a part of the test suite.
        required: false
      lumino_ref:
        description: |
          Only to be used if you need to link a specific Lumino's ref (branch, SHA),
          otherwise leave blank
        type: string
        required: false
        default: ""

# https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  # only cancel in-progress jobs or runs for the current workflow - matches against branch & tags
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  print-info:
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "::group::Printing env variables 🖨"
          echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event.\n"
          echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!\n"
          echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}.\n"
          echo "🗂 Workspace is ${{ github.workspace }} \n"
          echo "inputs.repository = ${{ inputs.repository }} \n"
          echo "inputs.ref = ${{ inputs.ref }} \n"
          echo "github.workspace = ${{ github.workspace }} \n"
          echo "github.sha = ${{ github.sha }} \n"
          echo "github.repository = ${{ github.repository }} \n"
          echo "github.server_url = ${{ github.server_url }}"
          echo "::endgroup::"

  accessibility-test-jupyterlab:
    runs-on: ubuntu-latest
    steps:
      # We have to check out the repo in order to locally reference the action,
      # i.e., .github/actions/...
      - name: Check out repository 🛎
        uses: actions/checkout@v3

      - name: Log details in the summary
        run: |
          echo "# JupyterLab accessibility tests ♿️" >> $GITHUB_STEP_SUMMARY
          echo "## Input summary details" >> $GITHUB_STEP_SUMMARY
          echo "- workflow trigger: ${{ github.ref_name}}" >> $GITHUB_STEP_SUMMARY
          echo "- JupyterLab repository: ${{ github.event.inputs.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- JupyterLab repository ref: ${{ github.event.inputs.ref }}" >> $GITHUB_STEP_SUMMARY
          if [[ -n "${{ github.event.inputs.lumino_ref }}" ]]; then
            echo "- Linked Lumino ref: ${{ github.event.inputs.lumino_ref }} " >> $GITHUB_STEP_SUMMARY
          fi

      - name: Run testing action ✅
        uses: ./.github/actions/accessibility-test-jupyterlab
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}
          test_project: ${{ inputs.test_project }}
          lumino_ref: ${{ inputs.lumino_ref }}
